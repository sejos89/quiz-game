{"version":3,"sources":["context/AppContext.js","components/ToggleButton.js","components/Navigation.js","App.js","index.js"],"names":["AppContext","React","createContext","ToggleButton","useContext","toggleTheme","setToggleTheme","class","type","id","onClick","for","Navigation","changeTopic","topic","className","style","backgroundColor","color","title","questions","nuclear_chemistry","periodic_relationship","ionic_bond","covalent_bond","intermolecular","acids_bases","redox","App","useState","setTopic","currentQuestion","setCurrentQuestion","showScore","setShowScore","score","setScore","questionAnswered","setQuestionAnswered","chosenAnswer","setChosenAnswer","useEffect","restartTest","Provider","value","currentTopic","length","src","question","answers","map","answer","index","disabled","correctAnswerIndex","e","correctAnswer","handleAnswerOptionClick","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"480BAEaA,EAAaC,IAAMC,gB,4BCEjB,SAASC,IAAgB,IAAD,EACGC,qBAAWJ,GAA3CK,EAD6B,EAC7BA,YAAaC,EADgB,EAChBA,eAErB,OACE,sBAAKC,MAAM,SAAX,UACE,uBACEC,KAAK,WACLD,MAAM,gBACNE,GAAG,SACHC,QAAS,kBAAMJ,GAAgBD,MAEjC,wBAAOE,MAAM,gBAAgBI,IAAI,SAAjC,UACE,sBAAMJ,MAAM,sBACZ,sBAAMA,MAAM,6BCXL,SAASK,EAAT,GAAsC,IAAhBC,EAAe,EAAfA,YAC3BR,EAAgBD,qBAAWJ,GAA3BK,YACAS,EAAUV,qBAAWJ,GAArBc,MAER,OACE,sBACEC,UAAU,QACVC,MAAOX,EAAc,CAAEY,gBAAiB,WAAc,GAFxD,UAIE,cAAC,EAAD,IACA,mBAAGD,MAAOX,EAAc,CAAEa,MAAO,SAAY,GAA7C,6BACA,qBAAIH,UAAU,YAAd,UACE,6BACE,wBACEA,UACED,EAAMK,QAAUC,EAAUC,kBAAkBF,MACxC,eACAd,EACA,cACA,GAENK,QAAS,kBAAMG,EAAYO,EAAUC,oBARvC,SAUGD,EAAUC,kBAAkBF,UAGjC,6BACE,wBACEJ,UACED,EAAMK,QAAUC,EAAUE,sBAAsBH,MAC5C,eACAd,EACA,cACA,GAENK,QAAS,kBAAMG,EAAYO,EAAUE,wBARvC,SAUGF,EAAUE,sBAAsBH,UAGrC,6BACE,wBACEJ,UACED,EAAMK,QAAUC,EAAUG,WAAWJ,MACjC,eACAd,EACA,cACA,GAENK,QAAS,kBAAMG,EAAYO,EAAUG,aARvC,SAUGH,EAAUG,WAAWJ,UAG1B,6BACE,wBACEJ,UACED,EAAMK,QAAUC,EAAUI,cAAcL,MACpC,eACAd,EACA,cACA,GAENK,QAAS,kBAAMG,EAAYO,EAAUI,gBARvC,SAUGJ,EAAUI,cAAcL,UAG7B,6BACE,wBACEJ,UACED,EAAMK,QAAUC,EAAUK,eAAeN,MACrC,eACAd,EACA,cACA,GAENK,QAAS,kBAAMG,EAAYO,EAAUK,iBARvC,SAUGL,EAAUK,eAAeN,UAG9B,6BACE,wBACEJ,UACED,EAAMK,QAAUC,EAAUM,YAAYP,MAClC,eACAd,EACA,cACA,GAENK,QAAS,kBAAMG,EAAYO,EAAUM,cARvC,SAUGN,EAAUM,YAAYP,UAG3B,6BACE,wBACEJ,UACED,EAAMK,QAAUC,EAAUO,MAAMR,MAC5B,eACAd,EACA,cACA,GAENK,QAAS,kBAAMG,EAAYO,EAAUO,QARvC,SAUGP,EAAUO,MAAMR,gB,MC3Gd,SAASS,IAAO,IAAD,EACFC,mBAAST,EAAUC,mBADjB,mBACrBP,EADqB,KACdgB,EADc,OAEkBD,mBAAS,GAF3B,mBAErBE,EAFqB,KAEJC,EAFI,OAGMH,oBAAS,GAHf,mBAGrBI,EAHqB,KAGVC,EAHU,OAIFL,mBAAS,GAJP,mBAIrBM,EAJqB,KAIdC,EAJc,OAKoBP,oBAAS,GAL7B,mBAKrBQ,EALqB,KAKHC,EALG,OAMYT,mBAAS,MANrB,mBAMrBU,EANqB,KAMPC,EANO,OAOUX,oBAAS,GAPnB,mBAOrBxB,EAPqB,KAORC,EAPQ,KAS5BmC,qBAAU,WACRC,MACC,CAAC5B,IAEJ,IAAM4B,EAAc,WAClBR,GAAa,GACbI,GAAoB,GACpBF,EAAS,GACTJ,EAAmB,IAuBrB,OACE,mCACE,eAAChC,EAAW2C,SAAZ,CAAqBC,MAAO,CAAEvC,cAAaC,iBAAgBQ,SAA3D,UACE,cAAC,EAAD,CAAYD,YANI,SAACgC,GACrBf,EAASe,MAOL,qBACE9B,UAAU,OACVC,MAAOX,EAAc,CAAEY,gBAAiB,WAAc,GAFxD,SAIGgB,EACC,sBAAKlB,UAAU,gBAAf,UACE,oBAAGC,MAAOX,EAAc,CAAEa,MAAO,SAAY,GAA7C,wBACciB,EADd,WAC6BrB,EAAMM,UAAU0B,UAE7C,wBAAQ/B,UAAU,cAAcL,QAASgC,EAAzC,6BAKF,qCACE,sBAAK3B,UAAU,mBAAf,UACE,oBAAGC,MAAOX,EAAc,CAAEa,MAAO,SAAY,GAA7C,4BACkBJ,EAAMK,SAExB,sBAAKJ,UAAU,yBAAf,UACE,sBACEA,UAAU,iBACVC,MAAOX,EAAc,CAAEa,MAAO,SAAY,GAF5C,UAIE,uBAAMF,MAAOX,EAAc,CAAEa,MAAO,SAAY,GAAhD,sBACYa,EAAkB,KALhC,IAOIjB,EAAMM,UAAU0B,UAEpB,qBAAK/B,UAAU,6BAAf,SACE,qBAAKgC,IAAI,6DAGb,qBACEhC,UAAU,gBACVC,MAAOX,EAAc,CAAEa,MAAO,SAAY,GAF5C,SAIGJ,EAAMM,UAAUW,GAAiBiB,cAGtC,qBAAKjC,UAAU,iBAAf,SACGD,EAAMM,UAAUW,GAAiBkB,QAAQC,KACxC,SAACC,EAAQC,GAAT,OACE,wBACEC,SAAUhB,EACVtB,UACEqC,IACEtC,EAAMM,UAAUW,GAAiBuB,oBACnCjB,EACI,kBACAe,IAAUb,GACVa,IACEtC,EAAMM,UAAUW,GACbuB,oBACLjB,EACA,oBACAA,EACA,UACA,GAENrB,MACEX,EACI,CAAEY,gBAAiB,UAAWC,MAAO,SACrC,GAENR,QAAS,SAAC6C,GACRjB,GAAoB,GACpBE,EAAgBY,GA5FN,SAACb,EAAciB,GACzCjB,IAAiBiB,GACnBpB,EAASD,EAAQ,GA2FCsB,CACEL,EACAtC,EAAMM,UAAUW,GAAiBuB,qBA3BvC,SA+BGH,SAKT,uBACA,sBAAKpC,UAAU,yBAAf,UACE,qBAAKA,UAAU,6BAAf,SACE,qBAAKgC,IAAI,2DAEX,wBAAQhC,UAAU,cAAcL,QAvGvB,WACrB,IAAMgD,EAAe3B,EAAkB,EACnC2B,EAAe5C,EAAMM,UAAU0B,OACjCd,EAAmB0B,GAEnBxB,GAAa,GAEfI,GAAoB,GACpBE,EAAgB,OA+FJ,wCClIhBmB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7bc90c6b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const AppContext = React.createContext();\r\n","import { useContext } from \"react\";\r\nimport { AppContext } from \"../context/AppContext\";\r\nimport \"./ToggleButton.scss\";\r\n\r\nexport default function ToggleButton() {\r\n  const { toggleTheme, setToggleTheme } = useContext(AppContext);\r\n\r\n  return (\r\n    <div class=\"switch\">\r\n      <input\r\n        type=\"checkbox\"\r\n        class=\"switch__input\"\r\n        id=\"Switch\"\r\n        onClick={() => setToggleTheme(!toggleTheme)}\r\n      />\r\n      <label class=\"switch__label\" for=\"Switch\">\r\n        <span class=\"switch__indicator\"></span>\r\n        <span class=\"switch__decoration\"></span>\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n","import { useContext } from \"react\";\r\nimport { AppContext } from \"../context/AppContext\";\r\nimport questions from \"../resources/questions\";\r\nimport \"./Navigation.css\";\r\nimport ToggleButton from \"./ToggleButton\";\r\n\r\nexport default function Navigation({ changeTopic }) {\r\n  const { toggleTheme } = useContext(AppContext);\r\n  const { topic } = useContext(AppContext);\r\n\r\n  return (\r\n    <div\r\n      className=\"topic\"\r\n      style={toggleTheme ? { backgroundColor: \"#f3e3e1\" } : {}}\r\n    >\r\n      <ToggleButton />\r\n      <p style={toggleTheme ? { color: \"black\" } : {}}>Choose a Field:</p>\r\n      <ul className=\"scrollBar\">\r\n        <li>\r\n          <button\r\n            className={\r\n              topic.title === questions.nuclear_chemistry.title\r\n                ? \"chosen-topic\"\r\n                : toggleTheme\r\n                ? \"dark-button\"\r\n                : \"\"\r\n            }\r\n            onClick={() => changeTopic(questions.nuclear_chemistry)}\r\n          >\r\n            {questions.nuclear_chemistry.title}\r\n          </button>\r\n        </li>\r\n        <li>\r\n          <button\r\n            className={\r\n              topic.title === questions.periodic_relationship.title\r\n                ? \"chosen-topic\"\r\n                : toggleTheme\r\n                ? \"dark-button\"\r\n                : \"\"\r\n            }\r\n            onClick={() => changeTopic(questions.periodic_relationship)}\r\n          >\r\n            {questions.periodic_relationship.title}\r\n          </button>\r\n        </li>\r\n        <li>\r\n          <button\r\n            className={\r\n              topic.title === questions.ionic_bond.title\r\n                ? \"chosen-topic\"\r\n                : toggleTheme\r\n                ? \"dark-button\"\r\n                : \"\"\r\n            }\r\n            onClick={() => changeTopic(questions.ionic_bond)}\r\n          >\r\n            {questions.ionic_bond.title}\r\n          </button>\r\n        </li>\r\n        <li>\r\n          <button\r\n            className={\r\n              topic.title === questions.covalent_bond.title\r\n                ? \"chosen-topic\"\r\n                : toggleTheme\r\n                ? \"dark-button\"\r\n                : \"\"\r\n            }\r\n            onClick={() => changeTopic(questions.covalent_bond)}\r\n          >\r\n            {questions.covalent_bond.title}\r\n          </button>\r\n        </li>\r\n        <li>\r\n          <button\r\n            className={\r\n              topic.title === questions.intermolecular.title\r\n                ? \"chosen-topic\"\r\n                : toggleTheme\r\n                ? \"dark-button\"\r\n                : \"\"\r\n            }\r\n            onClick={() => changeTopic(questions.intermolecular)}\r\n          >\r\n            {questions.intermolecular.title}\r\n          </button>\r\n        </li>\r\n        <li>\r\n          <button\r\n            className={\r\n              topic.title === questions.acids_bases.title\r\n                ? \"chosen-topic\"\r\n                : toggleTheme\r\n                ? \"dark-button\"\r\n                : \"\"\r\n            }\r\n            onClick={() => changeTopic(questions.acids_bases)}\r\n          >\r\n            {questions.acids_bases.title}\r\n          </button>\r\n        </li>\r\n        <li>\r\n          <button\r\n            className={\r\n              topic.title === questions.redox.title\r\n                ? \"chosen-topic\"\r\n                : toggleTheme\r\n                ? \"dark-button\"\r\n                : \"\"\r\n            }\r\n            onClick={() => changeTopic(questions.redox)}\r\n          >\r\n            {questions.redox.title}\r\n          </button>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\nimport { AppContext } from \"./context/AppContext\";\nimport Navigation from \"./components/Navigation\";\nimport questions from \"./resources/questions\";\nimport \"./App.css\";\n\nexport default function App() {\n  const [topic, setTopic] = useState(questions.nuclear_chemistry);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const [questionAnswered, setQuestionAnswered] = useState(false);\n  const [chosenAnswer, setChosenAnswer] = useState(null);\n  const [toggleTheme, setToggleTheme] = useState(false);\n\n  useEffect(() => {\n    restartTest();\n  }, [topic]);\n\n  const restartTest = () => {\n    setShowScore(false);\n    setQuestionAnswered(false);\n    setScore(0);\n    setCurrentQuestion(0);\n  };\n\n  const handleAnswerOptionClick = (chosenAnswer, correctAnswer) => {\n    if (chosenAnswer === correctAnswer) {\n      setScore(score + 1);\n    }\n  };\n\n  const goNextQuestion = () => {\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < topic.questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n    setQuestionAnswered(false);\n    setChosenAnswer(null);\n  };\n\n  const onChangeTopic = (currentTopic) => {\n    setTopic(currentTopic);\n  };\n  return (\n    <>\n      <AppContext.Provider value={{ toggleTheme, setToggleTheme, topic }}>\n        <Navigation changeTopic={onChangeTopic} />\n\n        <div\n          className=\"test\"\n          style={toggleTheme ? { backgroundColor: \"#f3e3e1\" } : {}}\n        >\n          {showScore ? (\n            <div className=\"score-section\">\n              <p style={toggleTheme ? { color: \"black\" } : {}}>\n                You scored {score} out of {topic.questions.length}\n              </p>\n              <button className=\"next-button\" onClick={restartTest}>\n                Restart test\n              </button>\n            </div>\n          ) : (\n            <>\n              <div className=\"question-section\">\n                <p style={toggleTheme ? { color: \"black\" } : {}}>\n                  Current field: {topic.title}\n                </p>\n                <div className=\"question-header-footer\">\n                  <div\n                    className=\"question-count\"\n                    style={toggleTheme ? { color: \"black\" } : {}}\n                  >\n                    <span style={toggleTheme ? { color: \"black\" } : {}}>\n                      Question {currentQuestion + 1}\n                    </span>\n                    /{topic.questions.length}\n                  </div>\n                  <div className=\"question-img-header-footer\">\n                    <img src=\"https://i.ibb.co/S0VJbQv/chem-game-trasnsparent.png\" />\n                  </div>\n                </div>\n                <div\n                  className=\"question-text\"\n                  style={toggleTheme ? { color: \"black\" } : {}}\n                >\n                  {topic.questions[currentQuestion].question}\n                </div>\n              </div>\n              <div className=\"answer-section\">\n                {topic.questions[currentQuestion].answers.map(\n                  (answer, index) => (\n                    <button\n                      disabled={questionAnswered}\n                      className={\n                        index ===\n                          topic.questions[currentQuestion].correctAnswerIndex &&\n                        questionAnswered\n                          ? \"noHover correct\"\n                          : index === chosenAnswer &&\n                            index !==\n                              topic.questions[currentQuestion]\n                                .correctAnswerIndex &&\n                            questionAnswered\n                          ? \"noHover incorrect\"\n                          : questionAnswered\n                          ? \"noHover\"\n                          : \"\"\n                      }\n                      style={\n                        toggleTheme\n                          ? { backgroundColor: \"#f3e3e1\", color: \"black\" }\n                          : {}\n                      }\n                      onClick={(e) => {\n                        setQuestionAnswered(true);\n                        setChosenAnswer(index);\n                        handleAnswerOptionClick(\n                          index,\n                          topic.questions[currentQuestion].correctAnswerIndex\n                        );\n                      }}\n                    >\n                      {answer}\n                    </button>\n                  )\n                )}\n              </div>\n              <br />\n              <div className=\"question-header-footer\">\n                <div className=\"question-img-header-footer\">\n                  <img src=\"https://i.ibb.co/qd7VCSY/uni-granada-transparent.png\" />\n                </div>\n                <button className=\"next-button\" onClick={goNextQuestion}>\n                  Next Question\n                </button>\n              </div>\n            </>\n          )}\n        </div>\n      </AppContext.Provider>\n    </>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}